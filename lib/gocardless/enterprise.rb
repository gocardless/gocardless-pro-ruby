# encoding: utf-8
#
# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank
#

require 'json'
require 'zlib'
require 'active_support/inflector'
require 'faraday'
require 'time'
require 'active_support/core_ext/hash/indifferent_access'


require 'uri'

module GoCardless
module Enterprise
end
end

version_file = 'enterprise/version'

if File.file? File.expand_path("#{version_file}.rb", File.dirname(__FILE__))
  require_relative version_file
else
  GoCardless::Enterprise::VERSION = ''
end

require_relative 'enterprise/core/client'
require_relative 'enterprise/core/errors'
require_relative 'enterprise/core/paginator'
require_relative 'enterprise/core/request'
require_relative 'enterprise/core/response'

require_relative 'enterprise/resources/base'
require_relative 'enterprise/resources/api_key'
require_relative 'enterprise/resources/creditor'
require_relative 'enterprise/resources/creditor_bank_account'
require_relative 'enterprise/resources/customer'
require_relative 'enterprise/resources/customer_bank_account'
require_relative 'enterprise/resources/event'
require_relative 'enterprise/resources/helper'
require_relative 'enterprise/resources/mandate'
require_relative 'enterprise/resources/payment'
require_relative 'enterprise/resources/payout'
require_relative 'enterprise/resources/publishable_api_key'
require_relative 'enterprise/resources/redirect_flow'
require_relative 'enterprise/resources/refund'
require_relative 'enterprise/resources/role'
require_relative 'enterprise/resources/subscription'
require_relative 'enterprise/resources/user'


module GoCardless::Enterprise
  extend Forwardable

  def self.api_keys
    self.client.api_keys
  end

  def self.creditors
    self.client.creditors
  end

  def self.creditor_bank_accounts
    self.client.creditor_bank_accounts
  end

  def self.customers
    self.client.customers
  end

  def self.customer_bank_accounts
    self.client.customer_bank_accounts
  end

  def self.events
    self.client.events
  end

  def self.helpers
    self.client.helpers
  end

  def self.mandates
    self.client.mandates
  end

  def self.payments
    self.client.payments
  end

  def self.payouts
    self.client.payouts
  end

  def self.publishable_api_keys
    self.client.publishable_api_keys
  end

  def self.redirect_flows
    self.client.redirect_flows
  end

  def self.refunds
    self.client.refunds
  end

  def self.roles
    self.client.roles
  end

  def self.subscriptions
    self.client.subscriptions
  end

  def self.users
    self.client.users
  end


  # Get a Client configured to use HTTP Basic authentication.
  #
  # @param api_key [String] The API key to use when connecting.
  # @param options [Hash<Symbol,String>] Optionally, custom settings
  #   to use with the client.  Allowed options are `default_headers`,
  #   `cache`, `user` and `url`.
  # @return [Client] A client configured to use the API with HTTP Basic
  #   authentication.
  def self.connect(url, user, password, options = {})
    options = self.custom_options(options)
    uri = URI.parse(url)
    uri.user = user.gsub('@', '%40')
    uri.password = password
    @client = Core::Client.new(uri.to_s, options)
  end

  def self.client
    if @client.nil?
      raise "Client not initialized, call GoCardless::Enterprise.connect(...)"
    end
    @client
  end

  # Get customized options.
  def self.custom_options(options)
    return self.default_options if options.nil?

    return self.default_options.merge(options) unless options[:default_headers]

    opts = self.default_options.merge(options)
    opts[:default_headers] = self.default_options[:default_headers].merge(options[:default_headers])

    opts
  end

  # Get the default options.
  def self.default_options
    {
      default_headers: { 
        'GoCardless-Version' => '2014-11-03',
        'User-Agent' => "#{user_agent}",
        'Content-Type' => 'application/json'
      }
    }
  end

  def self.user_agent
    @user_agent ||=
      begin
        gem_name = "gocardless-enterprise"
        gem_info = "#{gem_name}"
        gem_info += "/v#{ GoCardless::Enterprise::VERSION}" if defined?(GoCardless::Enterprise::VERSION)
        ruby_engine = defined?(RUBY_ENGINE) ? RUBY_ENGINE : 'ruby'
        ruby_version = RUBY_VERSION
        ruby_version += " p#{RUBY_PATCHLEVEL}" if defined?(RUBY_PATCHLEVEL)
        comment = ["#{ruby_engine} #{ruby_version}"]
        comment << "gocardless-enterprise v#{ GoCardless::Enterprise::VERSION}"
        comment << "faraday v#{Faraday::VERSION}"
        comment << RUBY_PLATFORM if defined?(RUBY_PLATFORM)
        "#{gem_info} (#{comment.join("; ")})"
      end
  end
end
