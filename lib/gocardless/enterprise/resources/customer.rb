

# encoding: utf-8
#
# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank
#
require 'uri'

module GoCardless::Enterprise
  module Resources
  # Customer objects hold the contact details for a customer. A customer can
  # have several [customer bank
  # accounts](https://developer.gocardless.com/pro/#api-endpoints-customer-bank-accounts),
  # which in turn can have several Direct Debit
  # [mandates](https://developer.gocardless.com/pro/#api-endpoints-mandates).
    class Customer < Base
      def initialize(client)
        @client = client
      end
      
    # Creates a new customer object.
      # Example URL: /customers
      # @param options: any query parameters, in the form of a hash
      def create(options = {})
        make_request(:post, "/customers", options)
      end

    # Returns a
    # [cursor-paginated](https://developer.gocardless.com/pro/#overview-cursor-pagination)
    # list of your customers.
      # Example URL: /customers
      # @param options: any query parameters, in the form of a hash
      def list(options = {})
        make_request(:get, "/customers", options)
      end

    # Retrieves the details of an existing customer.
      # Example URL: /customers/:identity
      #
      # @param identity:       # Unique identifier, beginning with "CU". }}
      # @param options: any query parameters, in the form of a hash
      def get(identity, options = {})
        path = sub_url("/customers/:identity", { 
          "identity" => identity
        })

        make_request(:get, path, options)
      end

    # Updates a customer object. Supports all of the fields supported when
    # creating a customer.
      # Example URL: /customers/:identity
      #
      # @param identity:       # Unique identifier, beginning with "CU". }}
      # @param options: any query parameters, in the form of a hash
      def update(identity, options = {})
        path = sub_url("/customers/:identity", { 
          "identity" => identity
        })

        make_request(:put, path, options)
      end

      def envelope_key
        "customers"
      end

      def sub_url(url, param_map)
        param_map.reduce(url) do |new_url, (param, value)|
          new_url.gsub(":#{param}", value)
        end
      end
    end
  end
end
