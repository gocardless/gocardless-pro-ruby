

# encoding: utf-8
#
# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank
#
require 'uri'

module GoCardless::Enterprise
  module Resources
  # Customer Bank Accounts hold the bank details of a
  # [customer](https://developer.gocardless.com/pro/#api-endpoints-customers).
  # They always belong to a
  # [customer](https://developer.gocardless.com/pro/#api-endpoints-customers),
  # and may be linked to several Direct Debit
  # [mandates](https://developer.gocardless.com/pro/#api-endpoints-mandates).
 
  # # 
  # Note that customer bank accounts must be unique, and so you will
  # encounter a `bank_account_exists` error if you try to create a duplicate
  # bank account. You may wish to handle this by updating the existing record
  # instead, the ID of which will be provided as links[customer_bank_account] in
  # the error response.
    class CustomerBankAccount < Base
      def initialize(client)
        @client = client
      end
      
    # Creates a new bank account object associated to a customer id.
    # 
   
    # # There are three different ways to supply bank account details:
    # 
  
    #  # - [Local
    # details](https://developer.gocardless.com/pro/#ui-compliance-local-bank-details)

    #    # 
    # - IBAN
    # 
    # - [Customer Bank Account
    # Tokens](https://developer.gocardless.com/pro/#js-flow-create-a-customer-bank-account-token)

    #    # 
    # For more information on the different fields required in each
    # country, see [local bank
    # details](https://developer.gocardless.com/pro/#ui-compliance-local-bank-details).
      # Example URL: /customer_bank_accounts
      # @param options: any query parameters, in the form of a hash
      def create(options = {})
        make_request(:post, "/customer_bank_accounts", options)
      end

    # Returns a
    # [cursor-paginated](https://developer.gocardless.com/pro/#overview-cursor-pagination)
    # list of your bank accounts.
      # Example URL: /customer_bank_accounts
      # @param options: any query parameters, in the form of a hash
      def list(options = {})
        make_request(:get, "/customer_bank_accounts", options)
      end

    # Retrieves the details of an existing bank account.
      # Example URL: /customer_bank_accounts/:identity
      #
      # @param identity:       # Unique identifier, beginning with "BA" }}
      # @param options: any query parameters, in the form of a hash
      def get(identity, options = {})
        path = sub_url("/customer_bank_accounts/:identity", { 
          "identity" => identity
        })

        make_request(:get, path, options)
      end

    # Updates a customer bank account object. Only the metadata parameter is
    # allowed.
      # Example URL: /customer_bank_accounts/:identity
      #
      # @param identity:       # Unique identifier, beginning with "BA" }}
      # @param options: any query parameters, in the form of a hash
      def update(identity, options = {})
        path = sub_url("/customer_bank_accounts/:identity", { 
          "identity" => identity
        })

        make_request(:put, path, options)
      end

    # Immediately cancels all associated mandates and cancellable payments.
   
    # # 
    # This will return a `disable_failed` error if the bank account has
    # already been disabled.
    # 
    # A disabled bank account can be
    # re-enabled by creating a new bank account resource with the same details.
      # Example URL: /customer_bank_accounts/:identity/actions/disable
      #
      # @param identity:       # Unique identifier, beginning with "BA" }}
      # @param options: any query parameters, in the form of a hash
      def disable(identity, options = {})
        path = sub_url("/customer_bank_accounts/:identity/actions/disable", { 
          "identity" => identity
        })

        make_request(:post, path, options)
      end

      def envelope_key
        "customer_bank_accounts"
      end

      def sub_url(url, param_map)
        param_map.reduce(url) do |new_url, (param, value)|
          new_url.gsub(":#{param}", value)
        end
      end
    end
  end
end
