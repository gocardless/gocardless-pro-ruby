

# encoding: utf-8
#
# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank
#
require 'uri'

module GoCardless::Enterprise
  module Resources
  # Each [payment](https://developer.gocardless.com/pro/#api-endpoints-payments)
  # taken through the API is linked to a "creditor", to whom the payment is then
  # paid out. In most cases your organisation will have a single "creditor", but
  # the API also supports collecting payments on behalf of others.
  # 
  #
  # Please get in touch if you wish to use this endpoint. Currently, for Anti
  # Money Laundering reasons, any creditors you add must be directly related to
  # your organisation.
    class Creditor < Base
      def initialize(client)
        @client = client
      end
      
    # Creates a new creditor.
      # Example URL: /creditors
      # @param options: any query parameters, in the form of a hash
      def create(options = {})
        make_request(:post, "/creditors", options)
      end

    # Returns a
    # [cursor-paginated](https://developer.gocardless.com/pro/#overview-cursor-pagination)
    # list of your creditors.
      # Example URL: /creditors
      # @param options: any query parameters, in the form of a hash
      def list(options = {})
        make_request(:get, "/creditors", options)
      end

    # Retrieves the details of an existing creditor.
      # Example URL: /creditors/:identity
      #
      # @param identity:       # Unique identifier, beginning with "CR". }}
      # @param options: any query parameters, in the form of a hash
      def get(identity, options = {})
        path = sub_url("/creditors/:identity", { 
          "identity" => identity
        })

        make_request(:get, path, options)
      end

    # Updates a creditor object. Supports all of the fields supported when
    # creating a creditor.
      # Example URL: /creditors/:identity
      #
      # @param identity:       # Unique identifier, beginning with "CR". }}
      # @param options: any query parameters, in the form of a hash
      def update(identity, options = {})
        path = sub_url("/creditors/:identity", { 
          "identity" => identity
        })

        make_request(:put, path, options)
      end

      def envelope_key
        "creditors"
      end

      def sub_url(url, param_map)
        param_map.reduce(url) do |new_url, (param, value)|
          new_url.gsub(":#{param}", value)
        end
      end
    end
  end
end
