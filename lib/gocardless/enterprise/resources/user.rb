

# encoding: utf-8
#
# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank
#
require 'uri'

module GoCardless::Enterprise
  module Resources
  # 
    class User < Base
      def initialize(client)
        @client = client
      end
      
    # <a name="user_exists"></a>Creates a new user object. Email addresses must
    # be unique.
      # Example URL: /users
      # @param options: any query parameters, in the form of a hash
      def create(options = {})
        make_request(:post, "/users", options)
      end

    # Returns a
    # [cursor-paginated](https://developer.gocardless.com/pro/#overview-cursor-pagination)
    # list of your users.
      # Example URL: /users
      # @param options: any query parameters, in the form of a hash
      def list(options = {})
        make_request(:get, "/users", options)
      end

    # Retrieves the details of an existing user. In addition to the usual
    # permissions based access rules, any user can access their own record.
      # Example URL: /users/:identity
      #
      # @param identity:       # Unique identifier, beginning with "US" }}
      # @param options: any query parameters, in the form of a hash
      def get(identity, options = {})
        path = sub_url("/users/:identity", { 
          "identity" => identity
        })

        make_request(:get, path, options)
      end

    # Updates a user object. Supports all of the fields supported when creating
    # a user.
      # Example URL: /users/:identity
      #
      # @param identity:       # Unique identifier, beginning with "US" }}
      # @param options: any query parameters, in the form of a hash
      def update(identity, options = {})
        path = sub_url("/users/:identity", { 
          "identity" => identity
        })

        make_request(:put, path, options)
      end

    # Enables a user
      # Example URL: /users/:identity/actions/enable
      #
      # @param identity:       # Unique identifier, beginning with "US" }}
      # @param options: any query parameters, in the form of a hash
      def enable(identity, options = {})
        path = sub_url("/users/:identity/actions/enable", { 
          "identity" => identity
        })

        make_request(:post, path, options)
      end

    # Disables a user
      # Example URL: /users/:identity/actions/disable
      #
      # @param identity:       # Unique identifier, beginning with "US" }}
      # @param options: any query parameters, in the form of a hash
      def disable(identity, options = {})
        path = sub_url("/users/:identity/actions/disable", { 
          "identity" => identity
        })

        make_request(:post, path, options)
      end

      def envelope_key
        "users"
      end

      def sub_url(url, param_map)
        param_map.reduce(url) do |new_url, (param, value)|
          new_url.gsub(":#{param}", value)
        end
      end
    end
  end
end
