

# encoding: utf-8
#
# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank
#
require 'uri'

module GoCardless::Enterprise
  module Resources
  # Mandates represent the Direct Debit mandate with a
  # [customer](https://developer.gocardless.com/pro/#api-endpoints-customers).
 
  # # 
  # GoCardless will notify you via a
  # [webhook](https://developer.gocardless.com/pro/#webhooks) whenever the
  # status of a mandate changes.
    class Mandate < Base
      def initialize(client)
        @client = client
      end
      
    # Creates a new mandate object
      # Example URL: /mandates
      # @param options: any query parameters, in the form of a hash
      def create(options = {})
        make_request(:post, "/mandates", options)
      end

    # Returns a
    # [cursor-paginated](https://developer.gocardless.com/pro/#overview-cursor-pagination)
    # list of your mandates. Except where stated, these filters can only be used
    # one at a time.
      # Example URL: /mandates
      # @param options: any query parameters, in the form of a hash
      def list(options = {})
        make_request(:get, "/mandates", options)
      end

    # Retrieves the details of an existing mandate.
    # 
    # If you specify
    # `Accept: application/pdf` on a request to this endpoint it will return a
    # PDF complying to the relevant scheme rules, which you can present to your
    # customer.
    # 
    # PDF mandates can be retrieved in Dutch, English,
    # French, German, Italian, Portuguese and Spanish by specifying the [ISO
    # 639-1](http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes#Partial_ISO_639_table)
    # language code as an `Accept-Language` header.
      # Example URL: /mandates/:identity
      #
      # @param identity:       # Unique identifier, beginning with "MD" }}
      # @param options: any query parameters, in the form of a hash
      def get(identity, options = {})
        path = sub_url("/mandates/:identity", { 
          "identity" => identity
        })

        make_request(:get, path, options)
      end

    # Updates a mandate object. This accepts only the metadata parameter.
      # Example URL: /mandates/:identity
      #
      # @param identity:       # Unique identifier, beginning with "MD" }}
      # @param options: any query parameters, in the form of a hash
      def update(identity, options = {})
        path = sub_url("/mandates/:identity", { 
          "identity" => identity
        })

        make_request(:put, path, options)
      end

    # Immediately cancels a mandate and all associated cancellable payments. Any
    # metadata supplied to this endpoint will be stored on the mandate
    # cancellation event it causes.
    # 
    # This will fail with a
    # `cancellation_failed` error if the mandate is already cancelled.
      # Example URL: /mandates/:identity/actions/cancel
      #
      # @param identity:       # Unique identifier, beginning with "MD" }}
      # @param options: any query parameters, in the form of a hash
      def cancel(identity, options = {})
        path = sub_url("/mandates/:identity/actions/cancel", { 
          "identity" => identity
        })

        make_request(:post, path, options)
      end

    # <a name="mandate_not_inactive"></a>Reinstates a cancelled or expired
    # mandate to the banks. You will receive a `resubmission_requested` webhook,
    # but after that reinstating the mandate follows the same process as its
    # initial creation, so you will receive a `submitted` webhook, followed by a
    # `reinstated` or `failed` webhook up to two working days later. Any
    # metadata supplied to this endpoint will be stored on the
    # `resubmission_requested` event it causes.
    # 
    # This will fail with
    # a `mandate_not_inactive` error if the mandate is already being submitted,
    # or is active.
      # Example URL: /mandates/:identity/actions/reinstate
      #
      # @param identity:       # Unique identifier, beginning with "MD" }}
      # @param options: any query parameters, in the form of a hash
      def reinstate(identity, options = {})
        path = sub_url("/mandates/:identity/actions/reinstate", { 
          "identity" => identity
        })

        make_request(:post, path, options)
      end

      def envelope_key
        "mandates"
      end

      def sub_url(url, param_map)
        param_map.reduce(url) do |new_url, (param, value)|
          new_url.gsub(":#{param}", value)
        end
      end
    end
  end
end
