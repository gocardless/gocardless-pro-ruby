

# encoding: utf-8
#
# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank
#
require 'uri'

module GoCardless::Enterprise
  module Resources
  # Creditor Bank Accounts hold the bank details of a
  # [creditor](https://developer.gocardless.com/pro/#api-endpoints-creditor).
  # These are the bank accounts which your
  # [payouts](https://developer.gocardless.com/pro/#api-endpoints-payouts) will
  # be sent to.
  # 
  # Note that creditor bank accounts must be unique, and so
  # you will encounter a `bank_account_exists` error if you try to create a
  # duplicate bank account. You may wish to handle this by updating the existing
  # record instead, the ID of which will be provided as
  # `links[creditor_bank_account]` in the error response.
    class CreditorBankAccount < Base
      def initialize(client)
        @client = client
      end
      
    # Creates a new creditor bank account object.
    # 
    # Bank account
    # details may be supplied using the IBAN (international bank account number)
    # or [local details](#ui-compliance-local-bank-details).
      # Example URL: /creditor_bank_accounts
      # @param options: any query parameters, in the form of a hash
      def create(options = {})
        make_request(:post, "/creditor_bank_accounts", options)
      end

    # Returns a
    # [cursor-paginated](https://developer.gocardless.com/pro/#overview-cursor-pagination)
    # list of your creditor bank accounts.
      # Example URL: /creditor_bank_accounts
      # @param options: any query parameters, in the form of a hash
      def list(options = {})
        make_request(:get, "/creditor_bank_accounts", options)
      end

    # Retrieves the details of an existing creditor bank account.
      # Example URL: /creditor_bank_accounts/:identity
      #
      # @param identity:       # Unique identifier, beginning with "BA" }}
      # @param options: any query parameters, in the form of a hash
      def get(identity, options = {})
        path = sub_url("/creditor_bank_accounts/:identity", { 
          "identity" => identity
        })

        make_request(:get, path, options)
      end

    # Immediately disables the bank account, no money can be paid out to a
    # disabled account.
    # 
    # This will return a `disable_failed` error
    # if the bank account has already been disabled.
    # 
    # A disabled
    # bank account can be re-enabled by creating a new bank account resource
    # with the same details.
      # Example URL: /creditor_bank_accounts/:identity/actions/disable
      #
      # @param identity:       # Unique identifier, beginning with "BA" }}
      # @param options: any query parameters, in the form of a hash
      def disable(identity, options = {})
        path = sub_url("/creditor_bank_accounts/:identity/actions/disable", { 
          "identity" => identity
        })

        make_request(:post, path, options)
      end

      def envelope_key
        "creditor_bank_accounts"
      end

      def sub_url(url, param_map)
        param_map.reduce(url) do |new_url, (param, value)|
          new_url.gsub(":#{param}", value)
        end
      end
    end
  end
end
