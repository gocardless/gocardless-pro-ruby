

# encoding: utf-8
#
# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank
#
require 'uri'

module GoCardless::Enterprise
  module Resources
  # Refund objects represent (partial) refunds of a
  # [payment](https://developer.gocardless.com/pro/#api-endpoints-payment) back
  # to the
  # [customer](https://developer.gocardless.com/pro/#api-endpoints-customers).
 
  # # 
  # The API allows you to create, show, list and update your refunds.
  #
  # 
  # GoCardless will notify you via a
  # [webhook](https://developer.gocardless.com/pro/#webhooks) whenever a refund
  # is created.
  # 
  # _Note:_ A payment that has been (partially) refunded
  # can still receive a late failure or chargeback from the banks.
    class Refund < Base
      def initialize(client)
        @client = client
      end
      
    # Creates a new refund object.
    # 
    # This fails with:<a
    # name="refund_payment_invalid_state"></a><a
    # name="total_amount_confirmation_invalid"></a>
    # 
    # -
    # `refund_payment_invalid_state` error if the linked
    # [payment](https://developer.gocardless.com/pro/#api-endpoints-payments)
    # isn't either `confirmed` or `paid_out`.
    # 
    # -
    # `total_amount_confirmation_invalid` if the confirmation amount doesn't
    # match the total amount refunded for the payment. This safeguard is there
    # to prevent two processes from creating refunds without awareness of each
    # other.
    # 
      # Example URL: /refunds
      # @param options: any query parameters, in the form of a hash
      def create(options = {})
        make_request(:post, "/refunds", options)
      end

    # Returns a
    # [cursor-paginated](https://developer.gocardless.com/pro/#overview-cursor-pagination)
    # list of your refunds.
      # Example URL: /refunds
      # @param options: any query parameters, in the form of a hash
      def list(options = {})
        make_request(:get, "/refunds", options)
      end

    # Retrieves all details for a single refund
      # Example URL: /refunds/:identity
      #
      # @param identity:       # Unique identifier, beginning with "RF" }}
      # @param options: any query parameters, in the form of a hash
      def get(identity, options = {})
        path = sub_url("/refunds/:identity", { 
          "identity" => identity
        })

        make_request(:get, path, options)
      end

    # Updates a refund object.
      # Example URL: /refunds/:identity
      #
      # @param identity:       # Unique identifier, beginning with "RF" }}
      # @param options: any query parameters, in the form of a hash
      def update(identity, options = {})
        path = sub_url("/refunds/:identity", { 
          "identity" => identity
        })

        make_request(:put, path, options)
      end

      def envelope_key
        "refunds"
      end

      def sub_url(url, param_map)
        param_map.reduce(url) do |new_url, (param, value)|
          new_url.gsub(":#{param}", value)
        end
      end
    end
  end
end
