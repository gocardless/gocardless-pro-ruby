

# encoding: utf-8
#
# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank
#
require 'uri'

module GoCardless::Enterprise
  module Resources
  # Payment objects represent payments from a
  # [customer](https://developer.gocardless.com/pro/#api-endpoints-customers) to
  # a [creditor](https://developer.gocardless.com/pro/#api-endpoints-creditors),
  # taken against a Direct Debit
  # [mandate](https://developer.gocardless.com/pro/#api-endpoints-mandates).
  #
  # 
  # GoCardless will notify you via a
  # [webhook](https://developer.gocardless.com/pro/#webhooks) whenever the state
  # of a payment changes.
    class Payment < Base
      def initialize(client)
        @client = client
      end
      
    # <a name="mandate_is_inactive"></a>Creates a new payment object.
    # 
   
    # # This fails with a `mandate_is_inactive` error if the linked
    # [mandate](https://developer.gocardless.com/pro/#api-endpoints-mandates) is
    # cancelled. Payments can be created against `pending_submission` mandates,
    # but they will not be submitted until the mandate becomes active.
      # Example URL: /payments
      # @param options: any query parameters, in the form of a hash
      def create(options = {})
        make_request(:post, "/payments", options)
      end

    # Returns a
    # [cursor-paginated](https://developer.gocardless.com/pro/#overview-cursor-pagination)
    # list of your payments.
      # Example URL: /payments
      # @param options: any query parameters, in the form of a hash
      def list(options = {})
        make_request(:get, "/payments", options)
      end

    # Retrieves the details of a single existing payment.
      # Example URL: /payments/:identity
      #
      # @param identity:       # Unique identifier, beginning with "PM" }}
      # @param options: any query parameters, in the form of a hash
      def get(identity, options = {})
        path = sub_url("/payments/:identity", { 
          "identity" => identity
        })

        make_request(:get, path, options)
      end

    # Updates a payment object. This accepts only the metadata parameter.
      # Example URL: /payments/:identity
      #
      # @param identity:       # Unique identifier, beginning with "PM" }}
      # @param options: any query parameters, in the form of a hash
      def update(identity, options = {})
        path = sub_url("/payments/:identity", { 
          "identity" => identity
        })

        make_request(:put, path, options)
      end

    # Cancels the payment if it has not already been submitted to the banks. Any
    # metadata supplied to this endpoint will be stored on the payment
    # cancellation event it causes.
    # 
    # This will fail with a
    # `cancellation_failed` error unless the payment's status is
    # `pending_submission`.
      # Example URL: /payments/:identity/actions/cancel
      #
      # @param identity:       # Unique identifier, beginning with "PM" }}
      # @param options: any query parameters, in the form of a hash
      def cancel(identity, options = {})
        path = sub_url("/payments/:identity/actions/cancel", { 
          "identity" => identity
        })

        make_request(:post, path, options)
      end

    # <a name="retry_failed"></a>Retries a failed payment if the underlying
    # mandate is active. You will receive a `resubmission_requested` webhook,
    # but after that retrying the payment follows the same process as its
    # initial creation, so you will receive a `submitted` webhook, followed by a
    # `confirmed` or `failed` event. Any metadata supplied to this endpoint will
    # be stored against the payment submission event it causes.
    # 
    #
    # This will return a `retry_failed` error if the payment has not failed.
      # Example URL: /payments/:identity/actions/retry
      #
      # @param identity:       # Unique identifier, beginning with "PM" }}
      # @param options: any query parameters, in the form of a hash
      def retry(identity, options = {})
        path = sub_url("/payments/:identity/actions/retry", { 
          "identity" => identity
        })

        make_request(:post, path, options)
      end

      def envelope_key
        "payments"
      end

      def sub_url(url, param_map)
        param_map.reduce(url) do |new_url, (param, value)|
          new_url.gsub(":#{param}", value)
        end
      end
    end
  end
end
