

# encoding: utf-8
#
# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank
#
require 'uri'

module GoCardless::Enterprise
  module Resources
  # Subscriptions create
  # [payments](https://developer.gocardless.com/pro/#api-endpoints-payments)
  # according to a schedule.
  # 
  # #### Recurrence Rules
  # 
  # The
  # following rules apply when specifying recurrence:
  # - The first payment
  # must be charged within 1 year.
  # - When neither `month` nor `day_of_month`
  # are present, the subscription will recur from the `start_at` based on the
  # `interval_unit`.
  # - If `month` or `day_of_month` are present, the
  # recurrence rules will be applied from the `start_at`, and the following
  # validations apply:
  # 
  # | interval_unit   | month                       
  #                   | day_of_month                            |
  # |
  # :-------------- | :--------------------------------------------- |
  # :-------------------------------------- |
  # | yearly          | optional
  # (required if `day_of_month` provided) | optional (required if `month`
  # provided) |
  # | monthly         | invalid                                 
  #       | required                                |
  # | weekly          |
  # invalid                                        | invalid                    
  #             |
  # 
  # Examples:
  # 
  # | interval_unit   | interval   |
  # month   | day_of_month   | valid?                                           
  #  |
  # | :-------------- | :--------- | :------ | :------------- |
  # :------------------------------------------------- |
  # | yearly          |
  # 1          | january | -1             | valid                               
  #               |
  # | yearly          | 1          | march   |              
  #  | invalid - missing `day_of_month`                   |
  # | monthly       
  #  | 6          |         | 12             | valid                            
  #                  |
  # | monthly         | 6          | august  | 12        
  #     | invalid - `month` must be blank                    |
  # | weekly     
  #     | 2          |         |                | valid                         
  #                     |
  # | weekly          | 2          | october | 10     
  #        | invalid - `month` and `day_of_month` must be blank |
  # 
  # ####
  # Rolling dates
  # 
  # When a charge date falls on a non-business day, one
  # of two things will happen:
  # 
  # - if the recurrence rule specified `-1`
  # as the `day_of_month`, the charge date will be rolled __backwards__ to the
  # previous business day (i.e., the last working day of the month).
  # -
  # otherwise the charge date will be rolled __forwards__ to the next business
  # day.
  # 
    class Subscription < Base
      def initialize(client)
        @client = client
      end
      
    # Creates a new subscription object
      # Example URL: /subscriptions
      # @param options: any query parameters, in the form of a hash
      def create(options = {})
        make_request(:post, "/subscriptions", options)
      end

    # Returns a
    # [cursor-paginated](https://developer.gocardless.com/pro/#overview-cursor-pagination)
    # list of your subscriptions.
      # Example URL: /subscriptions
      # @param options: any query parameters, in the form of a hash
      def list(options = {})
        make_request(:get, "/subscriptions", options)
      end

    # Retrieves the details of a single subscription.
      # Example URL: /subscriptions/:identity
      #
      # @param identity:       # Unique identifier, beginning with "SB" }}
      # @param options: any query parameters, in the form of a hash
      def get(identity, options = {})
        path = sub_url("/subscriptions/:identity", { 
          "identity" => identity
        })

        make_request(:get, path, options)
      end

    # Updates a subscription object.
      # Example URL: /subscriptions/:identity
      #
      # @param identity:       # Unique identifier, beginning with "SB" }}
      # @param options: any query parameters, in the form of a hash
      def update(identity, options = {})
        path = sub_url("/subscriptions/:identity", { 
          "identity" => identity
        })

        make_request(:put, path, options)
      end

    # Immediately cancels a subscription; no more payments will be created under
    # it. Any metadata supplied to this endpoint will be stored on the payment
    # cancellation event it causes.
    # 
    # This will fail with a
    # cancellation_failed error if the subscription is already cancelled or
    # finished.
      # Example URL: /subscriptions/:identity/actions/cancel
      #
      # @param identity:       # Unique identifier, beginning with "SB" }}
      # @param options: any query parameters, in the form of a hash
      def cancel(identity, options = {})
        path = sub_url("/subscriptions/:identity/actions/cancel", { 
          "identity" => identity
        })

        make_request(:post, path, options)
      end

      def envelope_key
        "subscriptions"
      end

      def sub_url(url, param_map)
        param_map.reduce(url) do |new_url, (param, value)|
          new_url.gsub(":#{param}", value)
        end
      end
    end
  end
end
