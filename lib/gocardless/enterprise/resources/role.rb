

# encoding: utf-8
#
# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank
#
require 'uri'

module GoCardless::Enterprise
  module Resources
  # <a name="insufficient_permissions"></a>Roles represent a set of permissions
  # that may be granted to a user. The permissions are specified at the
  # resource-type level, and can be `full_access` or `read_only`. If a
  # resource-type is not included that role's users will have no access to
  # resources of that type, and will receive an `insufficient_permissions` error
  # when trying to use those endpoints.
  # 
  # A role's `permissions`
  # attribute is used to set/show the permissions for a role and it's key/value
  # pairs are restricted to the below:
  # 
  # <dl>
  #  
  # <dt><p><code>resource</code></p></dt>
  #   <dd><p>One of:</p>
  #     <ul>

  #  #       <li><code>customers</code></li>
  #      
  # <li><code>customer_bank_accounts</code></li>
  #      
  # <li><code>mandates</code></li>
  #       <li><code>payments</code></li>
  # 
  #      <li><code>payouts</code></li>
  #      
  # <li><code>creditors</code></li>
  #      
  # <li><code>creditor_bank_accounts</code></li>
  #      
  # <li><code>roles</code></li>
  #       <li><code>users</code></li>
  #      
  # <li><code>events</code></li>
  #       <li><code>api_keys</code></li>
  #   
  #    <li><code>subscriptions</code></li>
  #      
  # <li><code>redirect_flows</code></li>
  #     </ul>
  #   </dd>
  # </dl>
  #
  # 
  # <dl>
  #   <dt><p><code>access</code></p></dt>
  #   <dd><p>One
  # of:</p>
  #     <ul>
  #       <li><code>full_access</code>: read and write
  # all records of this type</li>
  #       <li><code>read_only</code>: list and
  # show endpoints available, but not create, update, delete, or actions</li>
 
  # #     </ul>
  #   </dd>
  # </dl>
  # 
    class Role < Base
      def initialize(client)
        @client = client
      end
      
    # Create a role with set access permissions
      # Example URL: /roles
      # @param options: any query parameters, in the form of a hash
      def create(options = {})
        make_request(:post, "/roles", options)
      end

    # List all existing roles
      # Example URL: /roles
      # @param options: any query parameters, in the form of a hash
      def list(options = {})
        make_request(:get, "/roles", options)
      end

    # Retrieve all details for a single role
      # Example URL: /roles/:identity
      #
      # @param identity:       # Unique identifier, beginning with "RO" }}
      # @param options: any query parameters, in the form of a hash
      def get(identity, options = {})
        path = sub_url("/roles/:identity", { 
          "identity" => identity
        })

        make_request(:get, path, options)
      end

    # Updates a role object. Supports all of the fields supported when creating
    # a role.
      # Example URL: /roles/:identity
      #
      # @param identity:       # Unique identifier, beginning with "RO" }}
      # @param options: any query parameters, in the form of a hash
      def update(identity, options = {})
        path = sub_url("/roles/:identity", { 
          "identity" => identity
        })

        make_request(:put, path, options)
      end

    # Disables a role
      # Example URL: /roles/:identity/actions/disable
      #
      # @param identity:       # Unique identifier, beginning with "RO" }}
      # @param options: any query parameters, in the form of a hash
      def disable(identity, options = {})
        path = sub_url("/roles/:identity/actions/disable", { 
          "identity" => identity
        })

        make_request(:post, path, options)
      end

      def envelope_key
        "roles"
      end

      def sub_url(url, param_map)
        param_map.reduce(url) do |new_url, (param, value)|
          new_url.gsub(":#{param}", value)
        end
      end
    end
  end
end
