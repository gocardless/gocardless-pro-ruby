# encoding: utf-8
#
# WARNING: Do not edit by hand, this file was generated by Crank:
#
#   https://github.com/gocardless/crank
#
require 'uri'

module GoCardless::Enterprise
module Core
  # GoCardless Enterprise API
  class Client
    def initialize(url, options = {})
        @url = url
        root_url, @path_prefix = unpack_url(url)
        http_adapter = options[:http_adapter] || [:net_http]
        @connection = Faraday.new(url: root_url) do |faraday|
          faraday.adapter(*http_adapter)
        end
        @headers = options[:default_headers] || {}
    end

    def make_request(method, path, options)
      raise ArgumentError, 'options must be a hash' unless options.is_a?(Hash)
      options = { headers: @headers }.deep_merge(options)
      Request.new(@connection, method, @path_prefix + path, options).request
    end


    # <a name="api_key_not_active"></a>API keys are designed to be used by any
    # integrations you build. You should generate a key and then use it to make
    # requests to the API and set the webhook URL for that integration. They do
    # not expire, but can be disabled.
    #
    # @return [ApiKey]
    def api_keys
      @api_keys ||= Resources::ApiKey.new(self)
    end

    # Each
    # [payment](https://developer.gocardless.com/pro/#api-endpoints-payments)
    # taken through the API is linked to a "creditor", to whom the payment is
    # then paid out. In most cases your organisation will have a single
    # "creditor", but the API also supports collecting payments on behalf of
    # others.
    # 
    # Please get in touch if you wish to use this endpoint.
    # Currently, for Anti Money Laundering reasons, any creditors you add must
    # be directly related to your organisation.
    #
    # @return [Creditor]
    def creditors
      @creditors ||= Resources::Creditor.new(self)
    end

    # Creditor Bank Accounts hold the bank details of a
    # [creditor](https://developer.gocardless.com/pro/#api-endpoints-creditor).
    # These are the bank accounts which your
    # [payouts](https://developer.gocardless.com/pro/#api-endpoints-payouts)
    # will be sent to.
    # 
    # Note that creditor bank accounts must be
    # unique, and so you will encounter a `bank_account_exists` error if you try
    # to create a duplicate bank account. You may wish to handle this by
    # updating the existing record instead, the ID of which will be provided as
    # `links[creditor_bank_account]` in the error response.
    #
    # @return [CreditorBankAccount]
    def creditor_bank_accounts
      @creditor_bank_accounts ||= Resources::CreditorBankAccount.new(self)
    end

    # Customer objects hold the contact details for a customer. A customer can
    # have several [customer bank
    # accounts](https://developer.gocardless.com/pro/#api-endpoints-customer-bank-accounts),
    # which in turn can have several Direct Debit
    # [mandates](https://developer.gocardless.com/pro/#api-endpoints-mandates).
    #
    # @return [Customer]
    def customers
      @customers ||= Resources::Customer.new(self)
    end

    # Customer Bank Accounts hold the bank details of a
    # [customer](https://developer.gocardless.com/pro/#api-endpoints-customers).
    # They always belong to a
    # [customer](https://developer.gocardless.com/pro/#api-endpoints-customers),
    # and may be linked to several Direct Debit
    # [mandates](https://developer.gocardless.com/pro/#api-endpoints-mandates).

    #    # 
    # Note that customer bank accounts must be unique, and so you
    # will encounter a `bank_account_exists` error if you try to create a
    # duplicate bank account. You may wish to handle this by updating the
    # existing record instead, the ID of which will be provided as
    # links[customer_bank_account] in the error response.
    #
    # @return [CustomerBankAccount]
    def customer_bank_accounts
      @customer_bank_accounts ||= Resources::CustomerBankAccount.new(self)
    end

    # Events are stored for all webhooks. An event refers to a resource which
    # has been updated, for example a payment which has been collected, or a
    # mandate which has been transferred.
    #
    # @return [Event]
    def events
      @events ||= Resources::Event.new(self)
    end


    # @return [Helper]
    def helpers
      @helpers ||= Resources::Helper.new(self)
    end

    # Mandates represent the Direct Debit mandate with a
    # [customer](https://developer.gocardless.com/pro/#api-endpoints-customers).

    #    # 
    # GoCardless will notify you via a
    # [webhook](https://developer.gocardless.com/pro/#webhooks) whenever the
    # status of a mandate changes.
    #
    # @return [Mandate]
    def mandates
      @mandates ||= Resources::Mandate.new(self)
    end

    # Payment objects represent payments from a
    # [customer](https://developer.gocardless.com/pro/#api-endpoints-customers)
    # to a
    # [creditor](https://developer.gocardless.com/pro/#api-endpoints-creditors),
    # taken against a Direct Debit
    # [mandate](https://developer.gocardless.com/pro/#api-endpoints-mandates).
 
    #   # 
    # GoCardless will notify you via a
    # [webhook](https://developer.gocardless.com/pro/#webhooks) whenever the
    # state of a payment changes.
    #
    # @return [Payment]
    def payments
      @payments ||= Resources::Payment.new(self)
    end

    # Payouts represent transfers from GoCardless to a
    # [creditor](https://developer.gocardless.com/pro/#api-endpoints-creditors).
    # Each payout contains the funds collected from one or many
    # [payments](https://developer.gocardless.com/pro/#api-endpoints-payments).
    # Payouts are created automatically after a payment has been successfully
    # collected.
    #
    # @return [Payout]
    def payouts
      @payouts ||= Resources::Payout.new(self)
    end

    # Publishable API keys are designed to be used by the [js
    # flow](https://developer.gocardless.com/pro/#api-endpoints-customer-bank-account-tokens).
    # You should generate a key and then use it to make requests to the API.
    # They do not expire, but can be disabled.
    # 
    # Publishable API keys
    # only have permissions to create [customer bank account
    # tokens](https://developer.gocardless.com/pro/#api-endpoints-customer-bank-account-tokens).
    #
    # @return [PublishableApiKey]
    def publishable_api_keys
      @publishable_api_keys ||= Resources::PublishableApiKey.new(self)
    end

    # Redirect flows enable you to use GoCardless Pro's secure payment pages to
    # set up mandates with your customers.
    # 
    # The overall flow is:
   
    # # 
    # 1. You
    # [create](https://developer.gocardless.com/pro/#create-a-redirect-flow) a
    # redirect flow for your customer, and redirect them to the returned
    # redirect url, e.g. `https://pay.gocardless.com/flow/RE123`.
    # 
    #
    # 2. Your customer supplies their name, email, address, and bank account
    # details, and submits the form. This securely stores their details, and
    # redirects them back to your `success_redirect_url` with
    # `redirect_flow_id=RE123` in the querystring.
    # 
    # 3. You
    # [complete](https://developer.gocardless.com/pro/#complete-a-redirect-flow)
    # the redirect flow, which creates a
    # [customer](https://developer.gocardless.com/pro/#api-endpoints-customers),
    # [customer bank
    # account](https://developer.gocardless.com/pro/#api-endpoints-customer-bank-accounts),
    # and
    # [mandate](https://developer.gocardless.com/pro/#api-endpoints-mandates),
    # and returns the ID of the mandate. You may wish to create a
    # [subscription](https://developer.gocardless.com/pro/#api-endpoints-subscriptions)
    # or [payment](https://developer.gocardless.com/pro/#api-endpoints-payments)
    # at this point.
    # 
    # It is recommended that you link the redirect
    # flow to your user object as soon as it is created, and attach the created
    # resources to that user in the complete step.
    # 
    # Redirect flows
    # expire 30 minutes after they are first created. You cannot
    # [complete](https://developer.gocardless.com/pro/#complete-a-redirect-flow)
    # an expired redirect flow.
    #
    # @return [RedirectFlow]
    def redirect_flows
      @redirect_flows ||= Resources::RedirectFlow.new(self)
    end

    # Refund objects represent (partial) refunds of a
    # [payment](https://developer.gocardless.com/pro/#api-endpoints-payment)
    # back to the
    # [customer](https://developer.gocardless.com/pro/#api-endpoints-customers).

    #    # 
    # The API allows you to create, show, list and update your
    # refunds.
    # 
    # GoCardless will notify you via a
    # [webhook](https://developer.gocardless.com/pro/#webhooks) whenever a
    # refund is created.
    # 
    # _Note:_ A payment that has been
    # (partially) refunded can still receive a late failure or chargeback from
    # the banks.
    #
    # @return [Refund]
    def refunds
      @refunds ||= Resources::Refund.new(self)
    end

    # <a name="insufficient_permissions"></a>Roles represent a set of
    # permissions that may be granted to a user. The permissions are specified
    # at the resource-type level, and can be `full_access` or `read_only`. If a
    # resource-type is not included that role's users will have no access to
    # resources of that type, and will receive an `insufficient_permissions`
    # error when trying to use those endpoints.
    # 
    # A role's
    # `permissions` attribute is used to set/show the permissions for a role and
    # it's key/value pairs are restricted to the below:
    # 
    # <dl>
    # 
    #  <dt><p><code>resource</code></p></dt>
    #   <dd><p>One of:</p>
    #   
    #  <ul>
    #       <li><code>customers</code></li>
    #      
    # <li><code>customer_bank_accounts</code></li>
    #      
    # <li><code>mandates</code></li>
    #       <li><code>payments</code></li>

    #    #       <li><code>payouts</code></li>
    #      
    # <li><code>creditors</code></li>
    #      
    # <li><code>creditor_bank_accounts</code></li>
    #      
    # <li><code>roles</code></li>
    #       <li><code>users</code></li>
    # 
    #      <li><code>events</code></li>
    #      
    # <li><code>api_keys</code></li>
    #      
    # <li><code>subscriptions</code></li>
    #      
    # <li><code>redirect_flows</code></li>
    #     </ul>
    #   </dd>
    #
    # </dl>
    # 
    # <dl>
    #   <dt><p><code>access</code></p></dt>
    # 
    #  <dd><p>One of:</p>
    #     <ul>
    #      
    # <li><code>full_access</code>: read and write all records of this
    # type</li>
    #       <li><code>read_only</code>: list and show endpoints
    # available, but not create, update, delete, or actions</li>
    #    
    # </ul>
    #   </dd>
    # </dl>
    # 
    #
    # @return [Role]
    def roles
      @roles ||= Resources::Role.new(self)
    end

    # Subscriptions create
    # [payments](https://developer.gocardless.com/pro/#api-endpoints-payments)
    # according to a schedule.
    # 
    # #### Recurrence Rules
    # 
    #
    # The following rules apply when specifying recurrence:
    # - The first
    # payment must be charged within 1 year.
    # - When neither `month` nor
    # `day_of_month` are present, the subscription will recur from the
    # `start_at` based on the `interval_unit`.
    # - If `month` or
    # `day_of_month` are present, the recurrence rules will be applied from the
    # `start_at`, and the following validations apply:
    # 
    # |
    # interval_unit   | month                                          |
    # day_of_month                            |
    # | :-------------- |
    # :--------------------------------------------- |
    # :-------------------------------------- |
    # | yearly          |
    # optional (required if `day_of_month` provided) | optional (required if
    # `month` provided) |
    # | monthly         | invalid                     
    #                   | required                                |
    # |
    # weekly          | invalid                                        | invalid
    #                                 |
    # 
    # Examples:
    # 
    # |
    # interval_unit   | interval   | month   | day_of_month   | valid?          
    #                                   |
    # | :-------------- | :--------- |
    # :------ | :------------- |
    # :------------------------------------------------- |
    # | yearly       
    #   | 1          | january | -1             | valid                         
    #                     |
    # | yearly          | 1          | march   |    
    #            | invalid - missing `day_of_month`                   |
    # |
    # monthly         | 6          |         | 12             | valid           
    #                                   |
    # | monthly         | 6          |
    # august  | 12             | invalid - `month` must be blank                
    #    |
    # | weekly          | 2          |         |                |
    # valid                                              |
    # | weekly       
    #   | 2          | october | 10             | invalid - `month` and
    # `day_of_month` must be blank |
    # 
    # #### Rolling dates
    # 
   
    # # When a charge date falls on a non-business day, one of two things will
    # happen:
    # 
    # - if the recurrence rule specified `-1` as the
    # `day_of_month`, the charge date will be rolled __backwards__ to the
    # previous business day (i.e., the last working day of the month).
    # -
    # otherwise the charge date will be rolled __forwards__ to the next business
    # day.
    # 
    #
    # @return [Subscription]
    def subscriptions
      @subscriptions ||= Resources::Subscription.new(self)
    end


    # @return [User]
    def users
      @users ||= Resources::User.new(self)
    end

    def inspect
      url = URI.parse(@url)
      url.password = 'REDACTED' unless url.password.nil?
      "#<GoCardless::Enterprise::Client url=\"#{url}\">"
    end
    alias_method :to_s, :inspect

    private

    def unpack_url(url)
      path = URI.parse(url).path
      [URI.join(url).to_s, path == '/' ? '' : path]
    end
  end
end
end
